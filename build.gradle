/* (c) https://github.com/MontiCore/monticore */
plugins {
    id "java"
    id "monticore" version "6.6.0-SNAPSHOT" // MontiCore Plugin
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "6.0.0"
//    id 'cz.malohlava.visteg' version '1.0.5'
    id 'org.ec4j.editorconfig' version "0.0.3"
}

def commons_version = "1.7.9"
def grammar_classifier = "grammars"
def grammarDir = "src/main/grammars"
def testGrammarDir = "src/test/grammars"
def jscience_version = "4.3.1"

group = "de.monticore"
description = "SI Units"
sourceCompatibility = "1.8"


// configure non-standard source sets
sourceSets {
    main {
        java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
    }
    test {
        java.srcDirs += ["$projectDir/target/generated-test-sources/monticore/sourcecode"]
    }
}
subprojects {
    apply plugin: 'idea'
    idea {
        module {
            testSourceDirs += file("$projectDir/target/generated-test-sources/monticore/sourcecode")
        }
    }
}
buildDir = file("$projectDir/target")

configurations { grammar }

dependencies {
    implementation "de.se_rwth.commons:se-commons-logging:$commons_version"
    implementation "de.se_rwth.commons:se-commons-utilities:$commons_version"
    implementation "com.google.guava:guava:25.1-jre"
    implementation "org.antlr:antlr4-runtime:4.7.1"
    implementation "de.monticore:monticore-runtime:${project.properties['mc_version']}"
    implementation "de.monticore:monticore-grammar:${project.properties['mc_version']}"
    implementation "de.monticore:monticore-grammar:${project.properties['mc_version']}:$grammar_classifier"
	implementation "org.jscience:jscience:$jscience_version"
    grammar "de.monticore:monticore-grammar:${project.properties['mc_version']}:$grammar_classifier"
    implementation "ch.qos.logback:logback-classic:1.1.7"

//    testImplementation "junit:junit:4.13.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"
    testImplementation "org.junit.vintage:junit-vintage-engine:5.6.2"
}

repositories {
    mavenLocal()
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
}

def grammarDependencies = ext {
    SIUnits = []
    SIUnitLiterals = ["SIUnits"]
	SIUnitTypes4Math = ["SIUnitLiterals"]
	SIUnitTypes4Computing = ["SIUnitTypes4Math"]
    CombineExpressionsWithLiterals = []
    CombineExpressionsWithSIUnitLiterals = ["CombineExpressionsWithLiterals"]
	TestSIJava = []
	TestSIJavaWithCustomTypes = ["CustomSIUnitTypes4Computing"]
	CustomSIUnitTypes4Computing  = []
	TestSIUnitLiterals = []
	TestSIUnitTypes  = []
}

/*
def grammarPhase = ext {
	SIUnits = "main"
    SIUnitLiterals = "main"
	SIUnitTypes4Math = "main"
	SIUnitTypes4Computing = "main"
	CombineExpressionsWithSIUnitLiterals = "test"
	TestSIJava = "test"
	TestSIJavaWithCustomTypes = "test"
	CustomSIUnitTypes4Computing  = "test"
	TestSIUnitLiterals = "test"
	TestSIUnitTypes = "test"
}*/

createGrammarTasksForDir(grammarDir, "main")
createGrammarTasksForDir(testGrammarDir, "test")
def createGrammarTasksForDir(dir, mt) {
// one task per grammar file
fileTree(dir).matching { include '**/*.mc4' }.each {
    def g = it
    def grammarName = it.getName().substring(0, it.getName().lastIndexOf('.'))

    task "generate${mt}Grammar${grammarName}"(type: MCTask) {
        grammar = file g
		if(mt=="main")
			outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
		else
			outputDir = file "$buildDir/generated-test-sources/monticore/sourcecode"

		handcodedPath "$projectDir/src/main/java", "$projectDir/src/test/java"
		modelPath "$projectDir/src/main/grammars", "$projectDir/src/test/grammars"
        def grammarIncludingPackage = file(dir).toURI().relativize(g.toURI()).toString()
        def uptoDate = incCheck(grammarIncludingPackage)
        outputs.upToDateWhen { uptoDate }
    }
}
}

compileJava {
    tasks.findAll { task -> task.name.startsWith("generatemainGrammar") }.each {
        def grammarName = it.getName().substring('generatemainGrammar'.length())
        def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generatemainGrammar${name}"] }
        it.dependsOn dependsOnGrammars
        /*it.outputs.upToDateWhen {
            it.outputs.upToDateWhen && !dependsOnGrammars.any { !it.outputs.upToDateWhen }
        }*/
    }

    dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generatemainGrammar") } }
}

compileTestJava {
	tasks.findAll { task -> task.name.startsWith("generatetestGrammar") }.each {
        def grammarName = it.getName().substring('generatetestGrammar'.length())
        def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generatetestGrammar${name}"] }
        it.dependsOn dependsOnGrammars
        //it.outputs.upToDateWhen {
        //    it.outputs.upToDateWhen && !dependsOnGrammars.any { !it.outputs.upToDateWhen }
        //}
    }
    //dependsOn project.collect { it.tasks.withType(MCTask) }
	dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generatetestGrammar") } }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
        showStandardStreams = true
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// build sources jar in addition
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

// build javadoc jar in addition
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}

//shadowJar { // all in one jar
//    manifest {
//        attributes "Main-Class": "de.monticore.umlcd4a.CD4ACLI"
//    }
//    archiveClassifier = "cli"
//}

// generated java doc contains errors, disable for now
javadoc.failOnError(false)

// build grammar jar as well
task grammarJar(type: Jar) {
    from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
	from("$projectDir/src/test/grammars/") { include "**/*.mc4" }
    archiveClassifier = "grammars"
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task
    reportOn tasks.withType(Test)
}

// configure deployment
publishing {
    // configure what artifacts to publish
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            // artifact shadowJar
            artifact grammarJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}
